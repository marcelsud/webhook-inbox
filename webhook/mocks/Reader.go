// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	webhook "github.com/marcelsud/webhook-inbox/webhook"
	mock "github.com/stretchr/testify/mock"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, id
func (_m *Reader) Get(ctx context.Context, id string) (webhook.Webhook, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (webhook.Webhook, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) webhook.Webhook); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(webhook.Webhook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRouteID provides a mock function with given fields: ctx, routeID, limit
func (_m *Reader) GetByRouteID(ctx context.Context, routeID string, limit int) ([]webhook.Webhook, error) {
	ret := _m.Called(ctx, routeID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByRouteID")
	}

	var r0 []webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]webhook.Webhook, error)); ok {
		return rf(ctx, routeID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []webhook.Webhook); ok {
		r0 = rf(ctx, routeID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webhook.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, routeID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
