// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	webhook "github.com/marcelsud/webhook-inbox/webhook"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Acknowledge provides a mock function with given fields: ctx, routeID, deliveryMode, eventID
func (_m *Repository) Acknowledge(ctx context.Context, routeID string, deliveryMode webhook.DeliveryMode, eventID string) error {
	ret := _m.Called(ctx, routeID, deliveryMode, eventID)

	if len(ret) == 0 {
		panic("no return value specified for Acknowledge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode, string) error); ok {
		r0 = rf(ctx, routeID, deliveryMode, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *Repository) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: ctx, routeID, deliveryMode
func (_m *Repository) Consume(ctx context.Context, routeID string, deliveryMode webhook.DeliveryMode) ([]webhook.Webhook, error) {
	ret := _m.Called(ctx, routeID, deliveryMode)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 []webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode) ([]webhook.Webhook, error)); ok {
		return rf(ctx, routeID, deliveryMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode) []webhook.Webhook); ok {
		r0 = rf(ctx, routeID, deliveryMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webhook.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, webhook.DeliveryMode) error); ok {
		r1 = rf(ctx, routeID, deliveryMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessageID provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteMessageID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessageID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id string) (webhook.Webhook, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (webhook.Webhook, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) webhook.Webhook); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(webhook.Webhook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRouteID provides a mock function with given fields: ctx, routeID, limit
func (_m *Repository) GetByRouteID(ctx context.Context, routeID string, limit int) ([]webhook.Webhook, error) {
	ret := _m.Called(ctx, routeID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetByRouteID")
	}

	var r0 []webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]webhook.Webhook, error)); ok {
		return rf(ctx, routeID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []webhook.Webhook); ok {
		r0 = rf(ctx, routeID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webhook.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, routeID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementRetry provides a mock function with given fields: ctx, id
func (_m *Repository) IncrementRetry(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementRetry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTTL provides a mock function with given fields: ctx, id, ttl
func (_m *Repository) SetTTL(ctx context.Context, id string, ttl time.Duration) error {
	ret := _m.Called(ctx, id, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetTTL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, id, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, _a1
func (_m *Repository) Store(ctx context.Context, _a1 webhook.Webhook) (string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Webhook) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webhook.Webhook) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webhook.Webhook) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *Repository) UpdateStatus(ctx context.Context, id string, status webhook.Status) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.Status) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
