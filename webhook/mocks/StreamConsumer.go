// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	webhook "github.com/marcelsud/webhook-inbox/webhook"
	mock "github.com/stretchr/testify/mock"
)

// StreamConsumer is an autogenerated mock type for the StreamConsumer type
type StreamConsumer struct {
	mock.Mock
}

// Acknowledge provides a mock function with given fields: ctx, routeID, deliveryMode, eventID
func (_m *StreamConsumer) Acknowledge(ctx context.Context, routeID string, deliveryMode webhook.DeliveryMode, eventID string) error {
	ret := _m.Called(ctx, routeID, deliveryMode, eventID)

	if len(ret) == 0 {
		panic("no return value specified for Acknowledge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode, string) error); ok {
		r0 = rf(ctx, routeID, deliveryMode, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: ctx, routeID, deliveryMode
func (_m *StreamConsumer) Consume(ctx context.Context, routeID string, deliveryMode webhook.DeliveryMode) ([]webhook.Webhook, error) {
	ret := _m.Called(ctx, routeID, deliveryMode)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 []webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode) ([]webhook.Webhook, error)); ok {
		return rf(ctx, routeID, deliveryMode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode) []webhook.Webhook); ok {
		r0 = rf(ctx, routeID, deliveryMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webhook.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, webhook.DeliveryMode) error); ok {
		r1 = rf(ctx, routeID, deliveryMode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStreamConsumer creates a new instance of StreamConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamConsumer {
	mock := &StreamConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
