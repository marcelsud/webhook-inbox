// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	webhook "github.com/marcelsud/webhook-inbox/webhook"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, id
func (_m *UseCase) Get(ctx context.Context, id string) (webhook.Webhook, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 webhook.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (webhook.Webhook, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) webhook.Webhook); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(webhook.Webhook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementRetry provides a mock function with given fields: ctx, id
func (_m *UseCase) IncrementRetry(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementRetry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields: ctx, routeID, deliveryMode, payload, headers, maxRetries
func (_m *UseCase) Receive(ctx context.Context, routeID string, deliveryMode webhook.DeliveryMode, payload []byte, headers map[string]string, maxRetries int) (string, error) {
	ret := _m.Called(ctx, routeID, deliveryMode, payload, headers, maxRetries)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode, []byte, map[string]string, int) (string, error)); ok {
		return rf(ctx, routeID, deliveryMode, payload, headers, maxRetries)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.DeliveryMode, []byte, map[string]string, int) string); ok {
		r0 = rf(ctx, routeID, deliveryMode, payload, headers, maxRetries)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, webhook.DeliveryMode, []byte, map[string]string, int) error); ok {
		r1 = rf(ctx, routeID, deliveryMode, payload, headers, maxRetries)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *UseCase) UpdateStatus(ctx context.Context, id string, status webhook.Status) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, webhook.Status) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
